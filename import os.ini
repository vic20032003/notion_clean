import os
import requests
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv

load_dotenv()

# ─── Environment ────────────────────────────────────────────────────────────────
TELEGRAM_TOKEN       = os.getenv("TELEGRAM_TOKEN")
NOTION_TOKEN         = os.getenv("NOTION_TOKEN")
NOTION_DATABASE_ID   = os.getenv("NOTION_DATABASE_ID")
NOTION_VERSION       = "2022-06-28"             # or your preferred version

if not all([TELEGRAM_TOKEN, NOTION_TOKEN, NOTION_DATABASE_ID]):
    missing = [k for k in ("TELEGRAM_TOKEN","NOTION_TOKEN","NOTION_DATABASE_ID") if not os.getenv(k)]
    raise RuntimeError(f"Missing required env vars: {missing!r}")

TELEGRAM_API_URL     = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
NOTION_API_HEADERS   = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Notion-Version": NOTION_VERSION,
    "Content-Type": "application/json",
}

app = FastAPI()

# ─── Helpers ───────────────────────────────────────────────────────────────────
def send_telegram_message(chat_id: int, text: str):
    """Send a plain-text message back to Telegram."""
    resp = requests.post(
        f"{TELEGRAM_API_URL}/sendMessage",
        json={"chat_id": chat_id, "text": text}
    )
    resp.raise_for_status()
    return resp.json()

def create_notion_page(title: str, content: str):
    """Create a new page in your Notion database."""
    payload = {
        "parent": {"database_id": NOTION_DATABASE_ID},
        "properties": {
            "Name": {  # ← replace "Name" with your actual title property
                "title": [{"text": {"content": title}}]
            }
        },
        "children": [
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"text": {"content": content}}]
                }
            }
        ]
    }
    resp = requests.post(
        "https://api.notion.com/v1/pages",
        headers=NOTION_API_HEADERS,
        json=payload
    )
    resp.raise_for_status()
    return resp.json()

# ─── Endpoints ────────────────────────────────────────────────────────────────
@app.post("/telegram")
async def telegram_webhook(req: Request):
    update = await req.json()
    msg    = update.get("message") or {}
    chat   = msg.get("chat") or {}
    text   = msg.get("text", "").strip()

    if not chat or not text:
        # nothing to do
        return {"ok": True}

    chat_id = chat.get("id")
    # 1) Acknowledge receipt
    send_telegram_message(chat_id, "⏳ Working on it…")

    # 2) Send to Notion
    try:
        notion_resp = create_notion_page(title=text, content=f"From Telegram chat {chat_id}")
    except Exception as e:
        # report error back to user
        send_telegram_message(chat_id, f"❌ Notion error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

    # 3) Confirm back to Telegram
    page_url = notion_resp.get("url", "https://www.notion.so")
    send_telegram_message(chat_id, f"✅ Created in Notion: {page_url}")

    return {"ok": True}