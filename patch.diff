from fastapi import FastAPI, Request, HTTPException, Depends, status
from fastapi.security import APIKeyHeader
from dotenv import load_dotenv
import os
import sqlite3
import json
from datetime import datetime
from typing import Optional, List, Dict, Any, Generator
from pydantic import BaseModel, Field
from enum import Enum
import logging
import logging.config
import uuid
import httpx
import secrets
import sys

load_dotenv()

LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "standard"
        },
    },
    "loggers": {
        "": {
            "handlers": ["default"],
            "level": "INFO",
            "propagate": True
        }
    },
}
# Apply logging
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(name)

# Security â€“ single source of truth for API Key
api_key_header = APIKeyHeader(name="Authorization", auto_error=False)

# === MODELS & ENUMS ===
class MessageType(str, Enum):
    USER_MESSAGE = "User Message"
    SYSTEM_MESSAGE = "System Message"
    AI_RESPONSE = "AI Response"
    COMMAND = "Command"
    FEEDBACK = "Feedback"

class TaskStatus(str, Enum):
    TODO = "To Do"
    IN_PROGRESS = "In Progress"
    DONE = "Done"
    BLOCKED = "Blocked"

class PriorityLevel(str, Enum):
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    CRITICAL = "Critical"

class TaskPriority(str, Enum):
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class TaskCreate(BaseModel):
    title: str
    due_date: Optional[str] = None
    description: Optional[str] = None
    status: TaskStatus = TaskStatus.TODO
    priority: TaskPriority = TaskPriority.MEDIUM
    tags: Optional[List[str]] = None

class TelegramWebhook(BaseModel):
    update_id: int
    message: Optional[Dict[str, Any]] = None
    edited_message: Optional[Dict[str, Any]] = None
    channel_post: Optional[Dict[str, Any]] = None
    edited_channel_post: Optional[Dict[str, Any]] = None

class NotionQuery(BaseModel):
    database_id: Optional[str] = None
    filter: Optional[Dict[str, Any]] = None
    sorts: Optional[List[Dict[str, Any]]] = None
    page_size: Optional[int] = Field(20, gt=0, le=100)

class ContactCreate(BaseModel):
    name: str
    phone: Optional[str] = None
    email: Optional[str] = None
    company: Optional[str] = None
    notes: Optional[str] = None
    tags: Optional[List[str]] = None

app = FastAPI()